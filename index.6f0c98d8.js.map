{"mappings":"A,I,E,C,E,O,c,C,E,O,C,I,W,O,C,E,I,K,E,W,C,E,a,C,C,EEEO,OAAM,EACX,YACE,EAAe,CACb,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,CACA,IAAI,CAAC,YAAY,CAAG,EACpB,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,SAAS,CAAG,IAAI,CAAC,YAAY,CAClC,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,OAAQ,CACN,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,CAAC,CAAS,GACf,IAAI,CAAC,CAAC,CAAS,EACjB,CAEA,SAAU,CACR,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,KAAK,CAAG,EAEb,IAAI,CAAC,SAAS,CAAG,CACf,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,AACH,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,SAAS,AACvB,CAEA,UAAW,CACT,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CAAgB,CAC7B,IAAM,EAAW,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,CAAC,CAAC,CAAU,CAAC,IAE9D,IAAI,CAAC,CAAC,CAAU,CAAC,EACnB,CACF,CAEA,WAAY,CACV,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CAAgB,CAC7B,IAAM,EAAW,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,AAAC,IACnC,IAAM,EAAc,EAAI,KAAK,GAAG,OAAO,GAGvC,OAAO,AAFW,IAAI,CAAC,CAAC,CAAU,CAAC,GAElB,OAAO,EAC1B,GAEA,IAAI,CAAC,CAAC,CAAU,CAAC,EACnB,CACF,CAEA,QAAS,CACP,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CAAgB,CAE7B,IAAM,EAAW,AADO,IAAI,CAAC,CAAC,CAAS,CAAC,IAAI,CAAC,SAAS,EACrB,GAAG,CAAC,AAAC,GAAQ,IAAI,CAAC,CAAC,CAAU,CAAC,IAE/D,IAAI,CAAC,CAAC,CAAU,CAAC,IAAI,CAAC,CAAC,CAAS,CAAC,GACnC,CACF,CAEA,UAAW,CACT,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CAAgB,CAE7B,IAAM,EAAW,AADO,IAAI,CAAC,CAAC,CAAS,CAAC,IAAI,CAAC,SAAS,EACrB,GAAG,CAAC,AAAC,IACpC,IAAM,EAAc,EAAI,KAAK,GAAG,OAAO,GAGvC,OAAO,AAFW,IAAI,CAAC,CAAC,CAAU,CAAC,GAElB,OAAO,EAC1B,GAEA,IAAI,CAAC,CAAC,CAAU,CAAC,IAAI,CAAC,CAAC,CAAS,CAAC,GACnC,CACF,CAEA,CAAC,CAAS,GACR,GAAM,CAAC,EAAS,EAAQ,CAAG,IAAI,CAAC,CAAC,CAAc,EAE/C,CAAA,IAAI,CAAC,SAAS,CAAC,EAAQ,CAAC,EAAQ,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAC/D,CAEA,CAAC,CAAc,GACb,IAAM,EAAa,EAAE,CAUrB,OARA,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAK,KAC3B,EAAI,OAAO,CAAC,CAAC,EAAM,KACJ,IAAT,GACF,EAAW,IAAI,CAAC,CAAC,EAAU,EAAY,CAE3C,EACF,GAEO,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAClE,CAEA,CAAC,CAAU,CAAC,CAAG,EACb,IAAM,EAAY,EAAI,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GACjC,EAAS,EAAE,CACb,EAAI,EAER,KAAO,EAAI,EAAU,MAAM,EACrB,CAAS,CAAC,EAAE,GAAK,CAAS,CAAC,EAAI,EAAE,EACnC,EAAO,IAAI,CAAC,AAAe,EAAf,CAAS,CAAC,EAAE,EACxB,IAAI,CAAC,KAAK,EAAI,AAAe,EAAf,CAAS,CAAC,EAAE,CAC1B,GAAK,IAEL,EAAO,IAAI,CAAC,CAAS,CAAC,EAAE,EACxB,GAAK,GAKT,OAFA,EAAO,IAAI,IAAI,MAAM,EAAI,EAAO,MAAM,EAAE,IAAI,CAAC,IAEtC,CACT,CAEA,CAAC,CAAS,CAAC,CAAM,EACf,OAAO,CAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAG,IAAa,EAAO,GAAG,CAAC,AAAC,GAAQ,CAAG,CAAC,EAAS,EACzE,CAEA,CAAC,CAAe,CAAC,CAAQ,EACvB,OAAO,KAAK,SAAS,CAAC,IAAI,CAAC,SAAS,IAAM,KAAK,SAAS,CAAC,EAC3D,CAEA,CAAC,CAAK,GACJ,IAAI,CAAC,MAAM,CAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,OACpD,MACA,IAAI,CAAC,MAAM,AACjB,CAEA,CAAC,CAAM,GACL,IAAK,IAAM,KAAO,IAAI,CAAC,SAAS,CAAE,CAChC,GAAI,EAAI,IAAI,CAAC,AAAC,GAAM,AAAM,IAAN,GAClB,MAAO,CAAA,EAGT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,MAAM,CAAE,IAC9B,GAAI,CAAG,CAAC,EAAE,GAAK,CAAG,CAAC,EAAI,EAAE,CACvB,MAAO,CAAA,CAGb,CAEA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,IAAM,EAAM,CACV,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CACpB,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CACpB,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CACpB,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CACrB,CAED,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,MAAM,CAAE,IAC9B,GAAI,CAAG,CAAC,EAAE,GAAK,CAAG,CAAC,EAAI,EAAE,CACvB,MAAO,CAAA,CAGb,CAEA,MAAO,CAAA,CACT,CAEA,CAAC,CAAU,CAAC,CAAY,EAClB,IAAI,CAAC,CAAC,CAAe,CAAC,KACxB,IAAI,CAAC,SAAS,CAAG,EACjB,IAAI,CAAC,CAAC,CAAS,GACf,IAAI,CAAC,CAAC,CAAK,GAEP,IAAI,CAAC,CAAC,CAAM,IACd,CAAA,IAAI,CAAC,MAAM,CAAG,MADhB,EAIJ,CACF,CDxLA,MAAM,EAAO,GC0Lb,CAAA,EAAiB,CAAjB,EDxLM,EAAS,SAAS,aAAa,CAAC,UAChC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAY,SAAS,gBAAgB,CAAC,cAkE5C,SAAS,IACP,IAAM,EAAQ,EAAK,QAAQ,GAE3B,IAAK,IAAI,EAAM,EAAG,EA3EP,EA2EmB,IAC5B,IAAK,IAAI,EAAM,EAAG,EA5ET,EA4EqB,IAAO,CACnC,IAAM,EAAU,CAAS,CAAC,EAAI,CAAC,QAAQ,CAAC,EAAI,CACtC,EAAO,CAAK,CAAC,EAAI,CAAC,EAAI,AAExB,AAAS,CAAA,IAAT,GACF,EAAQ,WAAW,CAAG,GACtB,EAAQ,SAAS,CAAG,eAEpB,EAAQ,WAAW,CAAG,EACtB,EAAQ,SAAS,CAAG,CAAC,uBAAuB,EAAE,EAAK,CAAC,CACpD,EAAQ,KAAK,CAAC,GAAG,CAAG,MACpB,EAAQ,KAAK,CAAC,IAAI,CAAG,OAGvB,WAAW,KACT,EAAQ,KAAK,CAAC,GAAG,CAAG,QACpB,EAAQ,KAAK,CAAC,IAAI,CAAG,OACvB,EAAG,IACL,CAGF,EAAU,WAAW,CAAG,EAAK,QAAQ,EACvC,CA1FA,EAAO,gBAAgB,CAAC,QAAS,AAAC,IAChC,EAAE,cAAc,GAEZ,AAAqB,SAArB,EAAK,SAAS,IAkBlB,EAAK,KAAK,GACV,IAjBE,EAAO,SAAS,CAAG,iBACnB,EAAO,WAAW,CAAG,UACrB,EAAa,SAAS,CAAC,GAAG,CAAC,YAE3B,EAAK,OAAO,GACZ,EAAO,SAAS,CAAG,eACnB,EAAO,WAAW,CAAG,QACrB,EAAa,SAAS,CAAC,MAAM,CAAC,UAC9B,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAW,SAAS,CAAC,GAAG,CAAC,UAEzB,IAEJ,GAOA,SAAS,gBAAgB,CAAC,UAE1B,SAAqB,CAAC,EAWpB,OAVA,EAAE,cAAc,GAES,QAArB,EAAK,SAAS,IAChB,EAAW,SAAS,CAAC,MAAM,CAAC,UAGL,SAArB,EAAK,SAAS,IAChB,EAAY,SAAS,CAAC,MAAM,CAAC,UAGvB,EAAE,GAAG,EACX,IAAK,YACH,EAAK,QAAQ,GACb,IACA,KAEF,KAAK,YACH,EAAK,QAAQ,GACb,IACA,KAEF,KAAK,aACH,EAAK,SAAS,GACd,IACA,KAEF,KAAK,UACH,EAAK,MAAM,GACX,GAKJ,CACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\n$parcel$export($a5fd07fa01589658$exports, \"Game\", function () { return $a5fd07fa01589658$export$985739bfa5723e08; });\n\"use strict\";\nclass $a5fd07fa01589658$export$985739bfa5723e08 {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.size = 4;\n        this.status = \"idle\";\n        this.gameField = this.initialState;\n        this.score = 0;\n    }\n    start() {\n        this.status = \"playing\";\n        this.#addNumber();\n        this.#addNumber();\n    }\n    restart() {\n        this.status = \"idle\";\n        this.score = 0;\n        this.gameField = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n    }\n    getStatus() {\n        return this.status;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.gameField;\n    }\n    moveLeft() {\n        if (this.status === \"playing\") {\n            const newState = this.gameField.map((row)=>this.#mergeCells(row));\n            this.#handleMove(newState);\n        }\n    }\n    moveRight() {\n        if (this.status === \"playing\") {\n            const newState = this.gameField.map((row)=>{\n                const reversedRow = row.slice().reverse();\n                const mergedRow = this.#mergeCells(reversedRow);\n                return mergedRow.reverse();\n            });\n            this.#handleMove(newState);\n        }\n    }\n    moveUp() {\n        if (this.status === \"playing\") {\n            const transposedState = this.#transpose(this.gameField);\n            const newState = transposedState.map((row)=>this.#mergeCells(row));\n            this.#handleMove(this.#transpose(newState));\n        }\n    }\n    moveDown() {\n        if (this.status === \"playing\") {\n            const transposedState = this.#transpose(this.gameField);\n            const newState = transposedState.map((row)=>{\n                const reversedRow = row.slice().reverse();\n                const mergedRow = this.#mergeCells(reversedRow);\n                return mergedRow.reverse();\n            });\n            this.#handleMove(this.#transpose(newState));\n        }\n    }\n    #addNumber() {\n        const [randomY, randomX] = this.#findEmptyCells();\n        this.gameField[randomY][randomX] = Math.random() < 0.8 ? 2 : 4;\n    }\n    #findEmptyCells() {\n        const emptyCells = [];\n        this.gameField.forEach((row, rowIndex)=>{\n            row.forEach((cell, columnIndex)=>{\n                if (cell === 0) emptyCells.push([\n                    rowIndex,\n                    columnIndex\n                ]);\n            });\n        });\n        return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    }\n    #mergeCells(row) {\n        const mergedRow = row.filter((cell)=>cell !== 0);\n        const newRow = [];\n        let i = 0;\n        while(i < mergedRow.length)if (mergedRow[i] === mergedRow[i + 1]) {\n            newRow.push(mergedRow[i] * 2);\n            this.score += mergedRow[i] * 2;\n            i += 2;\n        } else {\n            newRow.push(mergedRow[i]);\n            i += 1;\n        }\n        newRow.push(...Array(4 - newRow.length).fill(0));\n        return newRow;\n    }\n    #transpose(matrix) {\n        return matrix[0].map((_, colIndex)=>matrix.map((row)=>row[colIndex]));\n    }\n    #willStateChange(newState) {\n        return JSON.stringify(this.gameField) !== JSON.stringify(newState);\n    }\n    #isWin() {\n        this.status = this.gameField.some((row)=>row.includes(2048)) ? \"win\" : this.status;\n    }\n    #isLose() {\n        for (const row of this.gameField){\n            if (row.some((i)=>i === 0)) return false;\n            for(let i = 0; i < row.length; i++){\n                if (row[i] === row[i + 1]) return false;\n            }\n        }\n        for(let c = 0; c < 4; c++){\n            const row = [\n                this.gameField[0][c],\n                this.gameField[1][c],\n                this.gameField[2][c],\n                this.gameField[3][c]\n            ];\n            for(let i = 0; i < row.length; i++){\n                if (row[i] === row[i + 1]) return false;\n            }\n        }\n        return true;\n    }\n    #handleMove(newGameField) {\n        if (this.#willStateChange(newGameField)) {\n            this.gameField = newGameField;\n            this.#addNumber();\n            this.#isWin();\n            if (this.#isLose()) this.status = \"lose\";\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$export$985739bfa5723e08;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$size = 4;\nconst $09e991522ca7e64e$var$button = document.querySelector(\"button\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$fieldRows = document.querySelectorAll(\".field-row\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", (e)=>{\n    e.preventDefault();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$startGame();\n        $09e991522ca7e64e$var$button.className = \"button restart\";\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$button.className = \"button start\";\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$render();\n    }\n});\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$render();\n}\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$keyListener);\nfunction $09e991522ca7e64e$var$keyListener(e) {\n    e.preventDefault();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    switch(e.key){\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$render();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            $09e991522ca7e64e$var$render();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            $09e991522ca7e64e$var$render();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            $09e991522ca7e64e$var$render();\n            break;\n        default:\n            break;\n    }\n}\nfunction $09e991522ca7e64e$var$render() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    for(let row = 0; row < $09e991522ca7e64e$var$size; row++)for(let col = 0; col < $09e991522ca7e64e$var$size; col++){\n        const element = $09e991522ca7e64e$var$fieldRows[row].children[col];\n        const cell = state[row][col];\n        if (cell === 0) {\n            element.textContent = \"\";\n            element.className = \"field-cell\";\n        } else {\n            element.textContent = cell;\n            element.className = `field-cell field-cell--${cell}`;\n            element.style.top = \"0px\";\n            element.style.left = \"0px\";\n        }\n        setTimeout(()=>{\n            element.style.top = \"100px\";\n            element.style.left = \"100px\";\n        }, 400);\n    }\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n}\n\n\n//# sourceMappingURL=index.6f0c98d8.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game();\nconst size = 4;\nconst button = document.querySelector('button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\nconst fieldRows = document.querySelectorAll('.field-row');\n\nbutton.addEventListener('click', (e) => {\n  e.preventDefault();\n\n  if (game.getStatus() === 'idle') {\n    startGame();\n    button.className = 'button restart';\n    button.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    game.restart();\n    button.className = 'button start';\n    button.textContent = 'Start';\n    messageStart.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n\n    render();\n  }\n});\n\nfunction startGame() {\n  game.start();\n  render();\n}\n\ndocument.addEventListener('keydown', keyListener);\n\nfunction keyListener(e) {\n  e.preventDefault();\n\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n\n  switch (e.key) {\n    case 'ArrowDown':\n      game.moveDown();\n      render();\n      break;\n\n    case 'ArrowLeft':\n      game.moveLeft();\n      render();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      render();\n      break;\n\n    case 'ArrowUp':\n      game.moveUp();\n      render();\n      break;\n\n    default:\n      break;\n  }\n}\n\nfunction render() {\n  const state = game.getState();\n\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      const element = fieldRows[row].children[col];\n      const cell = state[row][col];\n\n      if (cell === 0) {\n        element.textContent = '';\n        element.className = 'field-cell';\n      } else {\n        element.textContent = cell;\n        element.className = `field-cell field-cell--${cell}`;\n        element.style.top = '0px';\n        element.style.left = '0px';\n      }\n\n      setTimeout(() => {\n        element.style.top = '100px';\n        element.style.left = '100px';\n      }, 400);\n    }\n  }\n\n  gameScore.textContent = game.getScore();\n}\n","'use strict';\n\nexport class Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.size = 4;\n    this.status = 'idle';\n    this.gameField = this.initialState;\n    this.score = 0;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.#addNumber();\n    this.#addNumber();\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.score = 0;\n\n    this.gameField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.gameField;\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      const newState = this.gameField.map((row) => this.#mergeCells(row));\n\n      this.#handleMove(newState);\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'playing') {\n      const newState = this.gameField.map((row) => {\n        const reversedRow = row.slice().reverse();\n        const mergedRow = this.#mergeCells(reversedRow);\n\n        return mergedRow.reverse();\n      });\n\n      this.#handleMove(newState);\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'playing') {\n      const transposedState = this.#transpose(this.gameField);\n      const newState = transposedState.map((row) => this.#mergeCells(row));\n\n      this.#handleMove(this.#transpose(newState));\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'playing') {\n      const transposedState = this.#transpose(this.gameField);\n      const newState = transposedState.map((row) => {\n        const reversedRow = row.slice().reverse();\n        const mergedRow = this.#mergeCells(reversedRow);\n\n        return mergedRow.reverse();\n      });\n\n      this.#handleMove(this.#transpose(newState));\n    }\n  }\n\n  #addNumber() {\n    const [randomY, randomX] = this.#findEmptyCells();\n\n    this.gameField[randomY][randomX] = Math.random() < 0.8 ? 2 : 4;\n  }\n\n  #findEmptyCells() {\n    const emptyCells = [];\n\n    this.gameField.forEach((row, rowIndex) => {\n      row.forEach((cell, columnIndex) => {\n        if (cell === 0) {\n          emptyCells.push([rowIndex, columnIndex]);\n        }\n      });\n    });\n\n    return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n  }\n\n  #mergeCells(row) {\n    const mergedRow = row.filter((cell) => cell !== 0);\n    const newRow = [];\n    let i = 0;\n\n    while (i < mergedRow.length) {\n      if (mergedRow[i] === mergedRow[i + 1]) {\n        newRow.push(mergedRow[i] * 2);\n        this.score += mergedRow[i] * 2;\n        i += 2;\n      } else {\n        newRow.push(mergedRow[i]);\n        i += 1;\n      }\n    }\n    newRow.push(...Array(4 - newRow.length).fill(0));\n\n    return newRow;\n  }\n\n  #transpose(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n\n  #willStateChange(newState) {\n    return JSON.stringify(this.gameField) !== JSON.stringify(newState);\n  }\n\n  #isWin() {\n    this.status = this.gameField.some((row) => row.includes(2048))\n      ? 'win'\n      : this.status;\n  }\n\n  #isLose() {\n    for (const row of this.gameField) {\n      if (row.some((i) => i === 0)) {\n        return false;\n      }\n\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === row[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (let c = 0; c < 4; c++) {\n      const row = [\n        this.gameField[0][c],\n        this.gameField[1][c],\n        this.gameField[2][c],\n        this.gameField[3][c],\n      ];\n\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === row[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  #handleMove(newGameField) {\n    if (this.#willStateChange(newGameField)) {\n      this.gameField = newGameField;\n      this.#addNumber();\n      this.#isWin();\n\n      if (this.#isLose()) {\n        this.status = 'lose';\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","Object","defineProperty","get","$a5fd07fa01589658$export$985739bfa5723e08","set","s","enumerable","configurable","constructor","initialState","size","status","gameField","score","start","addNumber","restart","getStatus","getScore","getState","moveLeft","newState","map","row","mergeCells","handleMove","moveRight","reversedRow","slice","reverse","mergedRow","moveUp","transposedState","transpose","moveDown","randomY","randomX","findEmptyCells","Math","random","emptyCells","forEach","rowIndex","cell","columnIndex","push","floor","length","filter","newRow","i","Array","fill","matrix","_","colIndex","willStateChange","JSON","stringify","isWin","some","includes","isLose","c","newGameField","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$fieldRows","querySelectorAll","$09e991522ca7e64e$var$render","state","col","element","children","textContent","className","style","top","left","setTimeout","addEventListener","e","preventDefault","classList","add","remove","key"],"version":3,"file":"index.6f0c98d8.js.map"}